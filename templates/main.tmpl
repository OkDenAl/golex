// Code generated by golex utility;
// This code is present a default handling of tokens;
// YOU CAN EDIT IT IF YOU NEED.
package main

import (
	"fmt"
	"log"
	"os"
)

type Handler struct {
	golexgen.HandlerBase
}

{{ range .AllRegexps }}
    {{ if .Edit }}
        func (h *Handler){{ .ActionName }}(
            text string,
            start, end golexgen.Position,
            errFunc golexgen.ErrFunc,
            switchCond golexgen.SwitchConditionFunc,
        ) (golexgen.Token,golexgen.Continued) {
            panic("edit me") // TODO: edit this
            {{ if .SwitchConditionName }}switchCond(golexgen.Condition{{ .SwitchConditionName }})

                {{ if .Continued }}return golexgen.Token{},{{ .Continued }}
                    }
                {{ else }} return golexgen.NewToken(golexgen.Tag{{ .ActionName }},start,end,text), {{ .Continued }}
                    }{{ end }}
            {{ else}}{{ if .Continued }}return golexgen.Token{},{{ .Continued }}
                    }
                {{ else }} return golexgen.NewToken(golexgen.Tag{{ .ActionName }},start,end,text), {{ .Continued }}
                    }{{ end }}
            {{end}}
    {{ else }}
    {{end}}
{{ end }}


func main() {
	if len(os.Args) < 2 {
		log.Fatal("usage must be: go run main.go <fileTag.txt>\n")
	}
	filePath := os.Args[1]

	file, err := os.Open(filePath)
	if err != nil {
		log.Fatal(err.Error())
	}
	defer file.Close()

	scn := golexgen.NewScanner(*bufio.NewReader(file), &Handler{})

	t := scn.NextTokenOneAutomata()
	for t.Tag() != golexgen.EOP {
		fmt.Println(t.String())
		t = scn.NextTokenOneAutomata()
	}
}