// Code generated by golex utility; DO NOT EDIT.
package golexgen

import (
	"fmt"
)

type ErrHandler interface {
	Error(msg string, pos Position, symbol string)
}

type (
    ErrFunc func (msg string, pos Position, symbol string)
    SwitchConditionFunc func (cond Condition)
)

type Continued bool

type LexemHandler interface {
	ErrHandler
    {{ range .AllRegexps }}{{ .ActionName }}(text string, start, end Position, errFunc ErrFunc, switchCond SwitchConditionFunc) (Token, Continued)
    {{ end }}
}

type Tag interface {
	GetTag() string
}

const EOP = "EOP"

type Condition int
const (
   dummy = Condition(iota)
{{ range $key, $value := .Conditions }}
   Condition{{ $key }}{{ end }}
)

type DefaultTag int
const (
	TagErr DefaultTag = iota
	{{ range .AllRegexps }}Tag{{ .ActionName }}
    {{ end }}{{ range $key, $value := .Conditions }}Tag{{ $key }}
    {{ end }}
)

func (t DefaultTag) GetTag() string {
	var tagToString = map[DefaultTag]string{
	    {{ range .AllRegexps }}Tag{{ .ActionName }}: "{{ .ActionName }}",
	    {{ end }}{{ range $key, $value := .Conditions }}Tag{{ $key }}: "{{ $key }}",
	    {{ end }}
	}

	return tagToString[t]
}

type FiniteState struct {
	NextState      int
	CurrentState   int
	TerminalStates []TerminalState
	Transitions    map[int]map[rune]int
}

type TerminalState struct {
	state     int
	lexemName string
}

func (f *FiniteState) FindMatchEndIndex(input string) int {
	f.CurrentState = 0
	i := 0
	for _, ch := range input {
		if !f.canMoveBy(ch) {
			break
		}
		i++
	}

	if f.isTerminal(f.CurrentState) {
		return i
	}

	return 0
}

func (f *FiniteState) FindMatchEndIndexOneAutomata(input string) (int,string) {
	f.CurrentState = 0
	i := 0
	prevI:=i
	prevStr:=""
	for _, ch := range input {
		if !f.canMoveBy(ch) {
			break
		}
		i++

		if val,ok:=f.isTerminalOneAutoamta(f.CurrentState);ok {
			prevI = i
			prevStr = val.lexemName
		}
	}


	return prevI,prevStr
}

func (f *FiniteState) canMoveBy(ch rune) bool {
	from := f.CurrentState
	if to, ok := f.Transitions[from][ch]; ok {
		f.CurrentState = to
		return true
	}

	return false
}

func (f *FiniteState) isTerminalOneAutoamta(state int) (TerminalState, bool) {
	for _, val := range f.TerminalStates {
		if state == val.state {
			return val, true
		}
	}
	return TerminalState{}, false
}

func (f *FiniteState) isTerminal(state int) bool {
	for _, val := range f.TerminalStates {
		if state == val.state {
			return true
		}
	}
	return false
}

var(
    {{ range .AllRegexps }}automata{{ .ActionName }} *FiniteState = &FiniteState{
    CurrentState:  {{ .RegexpVal.CurrentState }},
    TerminalStates: []TerminalState{ {{ range .RegexpVal.TerminalStates }}{state: {{.State}}, lexemName: "{{.LexemName}}" }, {{ end }}},
    Transitions: map[int]map[rune]int{
            {{ range $key, $value := .RegexpVal.Transitions }}{{ $key }}: { {{ range $char, $nextState := $value }}{{ $char }}: {{ $nextState }},{{ end }}},
            {{ end }}
        },
        }
    {{ end }}

    {{ range .UnionRegexps }}unionAutomata{{ .ActionName }} *FiniteState = &FiniteState{
        CurrentState:  {{ .RegexpVal.CurrentState }},
        TerminalStates: []TerminalState{ {{ range .RegexpVal.TerminalStates }}{state: {{.State}}, lexemName: "{{.LexemName}}" }, {{ end }}},
        Transitions: map[int]map[rune]int{
                {{ range $key, $value := .RegexpVal.Transitions }}{{ $key }}: { {{ range $char, $nextState := $value }}{{ $char }}: {{ $nextState }},{{ end }}},
                {{ end }}
            },
            }
        {{ end }}
)

type HandlerBase struct{}

func (e *HandlerBase) Error(msg string, pos Position, symbol string) {
	fmt.Printf("ERROR%s: %s %s\n",pos.String(),msg, symbol)
}

{{ range .AllRegexps }}func (h *HandlerBase){{ .ActionName }}(
    text string,
    start, end Position,
    errFunc ErrFunc,
    switchCond SwitchConditionFunc,
) (Token,Continued) {
    {{ if .SwitchConditionName }}switchCond(Condition{{ .SwitchConditionName }})

        {{ if .Continued }}return Token{},{{ .Continued }}
        }
        {{ else }} return NewToken(Tag{{ .ActionName }},start,end,text), {{ .Continued }}
        }{{ end }}
    {{ else}}{{ if .Continued }}return Token{},{{ .Continued }}
        }
        {{ else }} return NewToken(Tag{{ .ActionName }},start,end,text), {{ .Continued }}
        }{{ end }}
    {{end}}
{{ end }}

type EOPTag struct{}

func (e EOPTag) GetTag() string {
	return EOP
}

type Token struct {
	tag    Tag
	coords fragment
	val    string
}

func NewToken(tag Tag, starting, following Position, val string) Token {
	return Token{tag: tag, coords: newFragment(starting, following), val: val}
}

func (t Token) String() string {
	return fmt.Sprintf("%s %s: %s", t.tag.GetTag(), t.coords, t.val)
}

func (t Token) Tag() string {
	return t.tag.GetTag()
}

type fragment struct {
	starting  Position
	following Position
}

func newFragment(starting, following Position) fragment {
	return fragment{starting: starting, following: following}
}

func (f fragment) String() string {
	return fmt.Sprintf("%s-%s", f.starting.String(), f.following.String())
}

type Position struct {
	line  int
	pos   int
	index int
	text  []rune
}

func NewPosition(text []rune) Position {
	return Position{text: text, line: 1, pos: 1}
}

func (p *Position) String() string {
	return fmt.Sprintf("(%d,%d)", p.line, p.pos)
}

func (p *Position) cp() int {
	if p.index == len(p.text) {
		return -1
	}
	return int(p.text[p.index])
}

func (p *Position) isNewLine() bool {
	return p.cp() == '\n'
}

func (p *Position) Index() int {
    return p.index
}

func (p *Position) next() Position {
	if p.index < len(p.text) {
		if p.isNewLine() {
			p.line++
			p.pos = 1
		} else {
			p.pos++
		}
		p.index++
	}

	return *p
}

type Scanner struct {
	program []rune
	handler LexemHandler
	regexps map[Condition][]*FiniteState
	unionRegexps map[Condition]*FiniteState
	curPos  Position

	curCondition Condition
}

func NewScanner(program []rune, handler LexemHandler) Scanner {
    regexps := make(map[Condition][]*FiniteState)
    {{ range $key, $value := .Conditions }}
       regexps[Condition{{ $key }}]=make([]*FiniteState,0, {{ $value.RegexpsLen }})
       {{ range $value.Regexps }}regexps[Condition{{ $key }}] = append(regexps[Condition{{ $key }}], automata{{ .ActionName }})
        {{ end }}
    {{ end }}

    unionRegexps := make(map[Condition]*FiniteState)
    {{ range $key, $value := .Conditions }}
       unionRegexps[Condition{{ $key }}] = unionAutomata{{ $key }}
    {{ end }}


	return Scanner{
	    program: program,
	    handler: handler,
	    regexps:regexps,
	    unionRegexps: unionRegexps,
	    curPos: NewPosition(program),
	    curCondition:ConditionINIT,
	}
}

func (s *Scanner) switchCondition(cond Condition) {
    s.curCondition = cond
}

func (s *Scanner) findTokenOneAutomata(
    name string,
    start, end Position,
    errFunc ErrFunc,
    switchCond SwitchConditionFunc,
) (Token, Continued) {
    switch s.curCondition{
    {{ range $key, $value := .Conditions }} case Condition{{ $key }}: return s.findTokenOneAutomata{{ $key }}(name,start,end,errFunc, switchCond)
    {{ end }}}

	return Token{}, true
}

{{ range $key, $value := .Conditions }}
func (s *Scanner) findTokenOneAutomata{{ $key }}(
    name string,
    start, end Position,
    errFunc ErrFunc,
    switchCond SwitchConditionFunc,
) (Token, Continued) {
	switch name {
    {{ range $value.Regexps }}case "{{ .ActionName }}": return s.handler.{{ .ActionName }}(string(s.program[start.Index():end.Index()]), start, end, errFunc, switchCond)
    {{ end }}}

	return Token{}, true
}
{{ end }}


func (s *Scanner) findToken(
    automata *FiniteState,
    start, end Position,
    errFunc ErrFunc,
    switchCond SwitchConditionFunc,
) (Token, Continued) {
    switch s.curCondition{
    {{ range $key, $value := .Conditions }} case Condition{{ $key }}: return s.findToken{{ $key }}(automata,start,end,errFunc, switchCond)
    {{ end }}}

	return Token{}, true
}

{{ range $key, $value := .Conditions }}
func (s *Scanner) findToken{{ $key }}(
    automata *FiniteState,
    start, end Position,
    errFunc ErrFunc,
    switchCond SwitchConditionFunc,
) (Token, Continued) {
	switch automata {
    {{ range $value.Regexps }}case automata{{ .ActionName }}: return s.handler.{{ .ActionName }}(string(s.program[start.Index():end.Index()]), start, end, errFunc, switchCond)
    {{ end }}}

	return Token{}, true
}
{{ end }}

func (s *Scanner) NextTokenOneAutomata() Token {
	for s.curPos.cp() != -1 {
		start := s.curPos.index

		maxRight:=0
		res,name := s.unionRegexps[s.curCondition].FindMatchEndIndexOneAutomata(string(s.program[s.curPos.index:]))
		if res > 0 {
			maxRight = res
		}

		startPos := s.curPos
		var pos Position
		for s.curPos.index != start+maxRight {
			pos = s.curPos
			s.curPos.next()
		}
		pos.index++

		if maxRight == 0 {
			if s.curPos.cp() != -1 {
				s.curPos.next()
			} else {
				break
			}
			s.handler.Error("ERROR: unknown symbol", startPos, string(s.program[start]))
		} else {
			tok, continued := s.findTokenOneAutomata(name, startPos, pos, s.handler.Error, s.switchCondition)
			if !continued {
				return tok
			}
		}
	}

	return NewToken(EOPTag{}, s.curPos, s.curPos, "")
}

func (s *Scanner) NextToken() Token {
	for s.curPos.cp() != -1 {
		start := s.curPos.index

		var maxRightReg *FiniteState
		maxRight := 0

		for _, r := range s.regexps[s.curCondition] {
			res := r.FindMatchEndIndex(string(s.program[s.curPos.index:]))
			if res > maxRight {
				maxRightReg = r
				maxRight = res
			}
		}
		startPos := s.curPos
		var pos Position
		for s.curPos.index != start+maxRight {
			pos=s.curPos
			s.curPos.next()
		}
		pos.index++

		if maxRight == 0 {
			if s.curPos.cp() != -1 {
				s.curPos.next()
			} else {
				break
			}
			s.handler.Error("ERROR: unknown symbol", startPos, string(s.program[start]))
		} else {
			tok, continued := s.findToken(maxRightReg, startPos, pos, s.handler.Error, s.switchCondition)
			if !continued {
				return tok
			}
		}
	}

	return NewToken(EOPTag{}, s.curPos, s.curPos, "")
}
