// Code generated by golex utility;
// This code is present a default handling of tokens;
// YOU CAN EDIT IT IF YOU NEED.
package main

import (
	"fmt"
	"golex/examples/lab1.6/golexgen"
	"os"
	"time"
)

type Tag string

const TagString = Tag("STRING")

func (t Tag) GetTag() string {
	return string(t)
}

type Handler struct {
	str   string
	start golexgen.Position
	golexgen.HandlerBase
}

func (h *Handler) RegularStart(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	switchCond(golexgen.ConditionREGULAR)
	h.str = ""
	h.start = start

	return golexgen.Token{}, true
}

func (h *Handler) RegularEnd(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	switchCond(golexgen.ConditionINIT)

	return golexgen.NewToken(
		TagString,
		h.start, end,
		h.str,
	), false
}

func (h *Handler) RegularNewLine(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	errFunc("ERROR unknown symbol", start, "\\n")
	switchCond(golexgen.ConditionINIT)

	return golexgen.Token{}, true
}

func (h *Handler) RegularEscapeNewLine(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	h.str += string(text)

	return golexgen.Token{}, true
}

func (h *Handler) RegularEscapeTab(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	h.str += string(text)
	return golexgen.Token{}, true
}

func (h *Handler) RegularEscapeQota(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	h.str += string(text)
	return golexgen.Token{}, true
}

func (h *Handler) RegularSymb(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	h.str += string(text)
	return golexgen.Token{}, true
}

func (h *Handler) StartLiteral(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	switchCond(golexgen.ConditionLITERAL)
	h.str = ""
	h.start = start

	return golexgen.Token{}, true
}

func (h *Handler) Literal1(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	h.str += string(text)
	return golexgen.Token{}, true
}

func (h *Handler) LiteralEnd(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	switchCond(golexgen.ConditionINIT)

	return golexgen.NewToken(
		TagString,
		h.start, end,
		h.str,
	), false
}

func (h *Handler) LiteralNewLine(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	h.str += string(text)
	return golexgen.Token{}, true
}

func (h *Handler) LiteralChar(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	h.str += string(text)
	return golexgen.Token{}, true
}

func (h *Handler) Any(
	text string,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	errFunc("ERROR unknown symbol", start, string(text))
	return golexgen.Token{}, true
}

func main() {
	filePath := "./examples/lab1.6/test.txt"

	content, err := os.ReadFile(filePath)
	if err != nil {
		panic(err)
	}
	scn := golexgen.NewScanner([]rune(string(content)), &Handler{})

	tm := time.Now()
	t := scn.NextTokenOneAutomata()
	for t.Tag() != golexgen.EOP {
		fmt.Println(t.String())
		t = scn.NextToken()
	}
	fmt.Println(time.Since(tm).Microseconds())
}
