// Code generated by golex utility;
// This code is present a default handling of tokens;
// YOU CAN EDIT IT IF YOU NEED.
package main

import (
	"fmt"
	"golex/examples/testing/golexgen"
	"log"
	"os"
	"time"
)

type Handler struct {
	golexgen.ErrHandlerBase
}

func (h *Handler) Skip(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagSkip,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) Assembly(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagAssembly,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) Ident(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagIdent,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) Num(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagNum,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func main() {
	if len(os.Args) < 2 {
		log.Fatal("usage must be: go run main.go <fileTag.txt>\n")
	}
	filePath := os.Args[1]

	content, err := os.ReadFile(filePath)
	if err != nil {
		panic(err)
	}
	scn := golexgen.NewScanner([]rune(string(content)), &Handler{})

	tm := time.Now()
	t := scn.NextToken()
	for t.Tag() != golexgen.EOP {
		fmt.Println(t.String())
		t = scn.NextToken()
	}

	fmt.Println(time.Since(tm))
}
