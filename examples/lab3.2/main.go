// Code generated by golex utility;
// This code is present a default handling of tokens;
// YOU CAN EDIT IT IF YOU NEED.
package main

import (
	"fmt"
	"golex/examples/lab3.2/golexgen"
	"log"
	"os"
	"time"
)

type Handler struct {
	golexgen.ErrHandlerBase
}

func (h *Handler) Skip(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagSkip,
		start, end,
		string(text[start.Index():end.Index()]),
	), true
}

func (h *Handler) NewLine(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagNewLine,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) INT(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagINT,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) CHAR(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagCHAR,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) BOOL(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagBOOL,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) AND(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagAND,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) EQ(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagEQ,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) GE(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagGE,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) GT(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagGT,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) LT(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagLT,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) LE(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagLE,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) MOD(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagMOD,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) NE(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagNE,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) OR(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagOR,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) XOR(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagXOR,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) POW(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagPOW,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) NEW(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagNEW,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) NOT(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagNOT,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) STATEMENTS_END(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagSTATEMENTS_END,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) STATEMENT_EXPR_END(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagSTATEMENT_EXPR_END,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) IF(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagIF,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) WARNING(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagWARNING,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) ELSE(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagELSE,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) WHILE(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagWHILE,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) ASSIGN(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagASSIGN,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) COLON(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagCOLON,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) PLUS(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagPLUS,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) MINUS(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagMINUS,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) MUL(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagMUL,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) DIV(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagDIV,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) RETURN(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagRETURN,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) LEFT_PAREN_1(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagLEFT_PAREN_1,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) RIGHT_PAREN_1(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagRIGHT_PAREN_1,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) LEFT_PAREN_2(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagLEFT_PAREN_2,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) RIGHT_PAREN_2(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagRIGHT_PAREN_2,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) LEFT_PAREN_3(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagLEFT_PAREN_3,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) RIGHT_PAREN_3(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagRIGHT_PAREN_3,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) COMMA(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagCOMMA,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) TRUE(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagTRUE,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) FALSE(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagFALSE,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) REF_CONST(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagREF_CONST,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) NUMBER(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagNUMBER,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) VARNAME(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagVARNAME,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) STRING_CONST(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagSTRING_CONST,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) FUNCNAME(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagFUNCNAME,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) CHAR_CONST(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagCHAR_CONST,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func (h *Handler) COMMENT(
	text []rune,
	start, end golexgen.Position,
	errFunc golexgen.ErrFunc,
	switchCond golexgen.SwitchConditionFunc,
) (golexgen.Token, golexgen.Continued) {
	return golexgen.NewToken(
		golexgen.TagCOMMENT,
		start, end,
		string(text[start.Index():end.Index()]),
	), false
}

func main() {
	if len(os.Args) < 2 {
		log.Fatal("usage must be: go run main.go <fileTag.txt>\n")
	}
	filePath := os.Args[1]

	content, err := os.ReadFile(filePath)
	if err != nil {
		panic(err)
	}
	scn := golexgen.NewScanner([]rune(string(content)), &Handler{})

	tm := time.Now()
	t := scn.NextToken()
	for t.Tag() != golexgen.EOP {
		fmt.Println(t.String())
		t = scn.NextToken()
	}

	fmt.Println(time.Since(tm))
}
