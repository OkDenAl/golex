// Code generated by golex utility;
// This code is present a default handling of tokens;
// YOU CAN EDIT IT IF YOU NEED.
package main

import (
	"fmt"
	"golex/examples/lab3.2/golexgen"
	"log"
	"os"
)

type Handler struct {
	golexgen.ErrHandlerBase
}

func (h Handler) Skip(text []rune, start, end golexgen.Position) *golexgen.Token {
	return nil
}
func (h Handler) NewLine(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.NewLineDefaultTag, start, end, "\\n")
}
func (h Handler) INT(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.INTDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) CHAR(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.CHARDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) BOOL(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.BOOLDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) AND(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.ANDDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) EQ(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.EQDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) GE(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.GEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) GT(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.GTDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) LT(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.LTDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) LE(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.LEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) MOD(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.MODDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) NE(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.NEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) OR(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.ORDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) XOR(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.XORDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) POW(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.POWDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) NEW(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.NEWDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) NOT(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.NOTDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) STATEMENTS_END(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.STATEMENTS_ENDDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) STATEMENT_EXPR_END(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.STATEMENT_EXPR_ENDDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) IF(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.IFDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) WARNING(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.WARNINGDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) ELSE(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.ELSEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) WHILE(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.WHILEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) ASSIGN(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.ASSIGNDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) COLON(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.COLONDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) PLUS(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.PLUSDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) MINUS(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.MINUSDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) MUL(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.MULDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) DIV(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.DIVDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) RETURN(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.RETURNDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) LEFT_PAREN_1(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.LEFT_PAREN_1DefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) RIGHT_PAREN_1(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.RIGHT_PAREN_1DefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) LEFT_PAREN_2(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.LEFT_PAREN_2DefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) RIGHT_PAREN_2(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.RIGHT_PAREN_2DefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) LEFT_PAREN_3(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.LEFT_PAREN_3DefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) RIGHT_PAREN_3(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.RIGHT_PAREN_3DefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) COMMA(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.COMMADefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) TRUE(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.TRUEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) FALSE(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.FALSEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) REF_CONST(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.REF_CONSTDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) NUMBER(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.NUMBERDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) VARNAME(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.VARNAMEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) STRING_CONST(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.STRING_CONSTDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) FUNCNAME(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.FUNCNAMEDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) CHAR_CONST(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.CHAR_CONSTDefaultTag, start, end, string(text[start.Index():end.Index()]))
}
func (h Handler) COMMENT(text []rune, start, end golexgen.Position) *golexgen.Token {
	return golexgen.NewToken(golexgen.COMMENTDefaultTag, start, end, string(text[start.Index():end.Index()]))
}

func main() {
	if len(os.Args) < 2 {
		log.Fatal("usage must be: go run main.go <fileTag.txt>\n")
	}
	filePath := os.Args[1]

	content, err := os.ReadFile(filePath)
	if err != nil {
		panic(err)
	}
	scn := golexgen.NewScanner([]rune(string(content)), &Handler{})

	t := scn.NextToken()
	for t.Tag() != golexgen.EOP {
		fmt.Println(t.String())
		t = scn.NextToken()
	}
}
